server:
  port: 9000
  servlet:
    session:
      cookie:
        http-only: false
        secure: false

spring:
  application:
    name: job_hunter_auth
  mvc:
    log-request-details: true
  datasource:
    hikari:
      connection-timeout: 20000
      minimum-idle: 10
      maximum-pool-size: 30
      idle-timeout: 10000
      max-lifetime: 1000
      auto-commit: true
  flyway:
    enabled: true
    baseline-on-migrate: true
    baseline-version: 0
    schemas: flyway
    locations: classpath:db/migration/script
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    generate-ddl: true
    open-in-view: false

logging:
  level:
    root: INFO
    org.springframework.kafka: INFO
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.springframework.security.oauth2: INFO
    org.springframework.web.cors: INFO
    org.apache.catalina.filters.RequestDumperFilter: DEBUG
#    org.springframework.boot.autoconfigure: DEBUG

---
spring:
  config:
    activate:
      on-profile: 'local'
  autoconfigure:
    exclude:
      - 'org.springframework.cloud.vault.config.VaultAutoConfiguration'
      - 'org.springframework.cloud.vault.config.VaultObservationAutoConfiguration'
      - 'org.springframework.cloud.vault.config.VaultReactiveAutoConfiguration'
  kafka:
    bootstrap-servers: 'localhost:9092'
  datasource:
    url: 'jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/job_hunter_auth'
    username: ${POSTGRES_USER:job_hunter_admin}
    password: ${POSTGRES_PASSWORD:12345}
job_hunter_front:
  base_url: 'http://127.0.0.1:3000'
job_hunter_auth:
  base_url: 'http://127.0.0.1:9000'
oauth2:
  client-id: 'client'
  client-secret: '{noop}secret'

---
spring:
  config:
    activate:
      on-profile: 'docker'
  autoconfigure:
    exclude:
      - 'org.springframework.cloud.vault.config.VaultAutoConfiguration'
      - 'org.springframework.cloud.vault.config.VaultObservationAutoConfiguration'
      - 'org.springframework.cloud.vault.config.VaultReactiveAutoConfiguration'
  kafka:
    bootstrap-servers: 'kafka:9092'
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/job_hunter_auth
    username: ${POSTGRES_USER:job_hunter_admin}
    password: ${POSTGRES_PASSWORD:12345}
job_hunter_front:
  base_url: 'http://frontend.jobhunter.dc'
job_hunter_auth:
  base_url: 'http://auth.jobhunter.dc:9000'
oauth2:
  client-id: 'client'
  client-secret: '{noop}secret'

---
spring:
  config:
    activate:
      on-profile: 'prod'
    import: vault://
  cloud:
    vault:
      authentication: TOKEN
      host: vault.qa.guru
      uri: https://vault.qa.guru
      token: ${VAULT_TOKEN}
      kv:
        enabled: true
  kafka:
    bootstrap-servers: ${KAFKA_URL}
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/job_hunter_auth
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
job_hunter_front:
  base_url: 'https://jobhunter.qa.guru'
job_hunter_auth:
  base_url: 'https://auth.jobhunter.qa.guru'
oauth2:
  client-id: ${OAUTH2_CLIENT_ID}
  client-secret: ${OAUTH2_CLIENT_SECRET}

---
spring:
  config:
    activate:
      on-profile: 'staging'
    import: vault://
  cloud:
    vault:
      authentication: TOKEN
      host: vault.qa.guru
      uri: https://vault.qa.guru
      token: ${VAULT_TOKEN}
      kv:
        enabled: true
  kafka:
    bootstrap-servers: ${KAFKA_URL}
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/job_hunter_auth
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}

job_hunter_front:
  base_url: 'https://jobhunter_stage.qa.guru'

job_hunter_auth:
  base_url: 'https://auth.jobhunter_stage.qa.guru'

oauth2:
  client-id: ${OAUTH2_CLIENT_ID}
  client-secret: ${OAUTH2_CLIENT_SECRET}
---